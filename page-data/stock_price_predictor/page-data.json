{"componentChunkName":"component---src-templates-blog-js","path":"/stock_price_predictor","result":{"data":{"markdownRemark":{"html":"<h1>Stock Next day Price Predictor</h1>\n<p>I am hoping you are having basic market knowledge and Python knowledge before starting this. We are writing a code a here to predict next one day price for a stock. </p>\n<p><em>Disclaimer: This is for demonstration and learning\npurpose only, I don't recommend trusting purely this\nfor stock market trading. Trust your instincts.</em></p>\n<h2>Requirements</h2>\n<p>We require python3 for this, you can install python\nfrom here <a href=\"https://www.python.org/downloads/\">https://www.python.org/downloads/</a>\nAfter installing python you need to install these\npython packages. Open terminal/cmd and put these\ncommands.</p>\n<pre><code>$ pip3 install scikit-learn\n$ pip3 install pandas\n$ pip3 install pandas-datareader\n$ pip3 install matplotlib\n$ pip3 install tensorflow\n</code></pre>\n<h2>Code go through</h2>\n<p>Import these libraries first as we need will be requiring these.</p>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport pandas_datareader as web\nimport datetime as dt\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, LSTM\n</code></pre>\n<p>Now we need to define the stock, start date and end data for which we need to fetch stock prices dataset,</p>\n<pre><code class=\"language-python\">company =  'AAPL'  # Apple stock symbol\nstart = dt.datetime(2020,  1,  1)\nend = dt.datetime(2021,  2,  1)\n</code></pre>\n<p>We need to preprocess dataset to scale it to lower values range, here we keeping range to -1 to 1. We are using only close values here, the value of stocks after market has stopped.</p>\n<pre><code class=\"language-python\">scaler = MinMaxScaler(feature_range=[0,1])\nscaled_data = scaler.fit_transform(data['Close'].values.reshape(-1,1))\n</code></pre>\n<h3>Storing trained data</h3>\n<p>Here we storing the training data in arrays. Going from number of prediction days to length of scaled data, starting counting from 60th index to the last index of scaled data.\nHere in x<em>train we adding data for first 60 values, using this we will we will store 61th value in y</em>train and so on\nConvert our arrays to numpy array and reshape.</p>\n<pre><code class=\"language-python\">prediction_days = 60\nx_train =  []\ny_train =  []\nfor x in  range(prediction_days,  len(scaled_data)):\n    x_train.append(scaled_data[x-prediction_days:x,  0])  # 60 values\n    y_train.append(scaled_data[x,0])  # 61st value\n\nx_train = np.array(x_train)\ny_train = np.array(y_train)\nx_train = np.reshape(x_train,  (x_train.shape[0], x_train.shape[1],  1))\n</code></pre>\n<h3>Building model</h3>\n<p>Initialize a Sequential model. A <code>Sequential</code> model is appropriate for a plain stack of layers where each layer has exactly one input tensor and one output tensor.\nWe are using Long Short-Term Memory Networks here, is a type of neural network model which is capable of learning dependency of order in sequence prediction problem, like the one we need to do here, process past data to get next data. Units are layers of data set to be trained, more the number more time it will take to train data. return_sequences is set true because LSTM does feedback operation to feed again data.\nData epochs 30 means 29 times iterate same data. We can tweak this number to get better results</p>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(LSTM(units=50,  return_sequences=True,  input_shape=(x_train.shape[1],  1)))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units=50,  return_sequences=True))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units=50))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units=1))  # Prediction of next closing value\nmodel.compile(optimizer='adam',  loss='mean_squared_error')\nmodel.fit(x_train, y_train,  epochs=30)\n</code></pre>\n<h3>Using model to predict next close price</h3>\n<p>First we create a test data and use our model on it to check how well it matches with actual data.\nAgain we will be fetching Close prices for same company stock from desired date to current date, and reshape last 60 days values.\nThen we need to create and reshape our data to numpy array, as predict function takes input a defined </p>\n<pre><code class=\"language-python\">test_start = dt.datetime(2020,1,1)\ntest_end = dt.datetime.now()\ntest_data = web.DataReader(company,  'yahoo', test_start, test_end)\nactual_prices = test_data['Close'].values\ntotal_dataset = test_data['Close']\nmodel_inputs = total_dataset[len(total_dataset) - prediction_days:].values\nmodel_inputs = model_inputs.reshape(-1,  1)\nmodel_inputs = scaler.transform(model_inputs)\n</code></pre>\n<p>Here we are putting out model_inputs numpy array to model predict to get the desired value, but before putting it we need to reshape our data to dimensions that model had used while training.</p>\n<pre><code class=\"language-python\">real_data =  [model_inputs[len(model_inputs)  -  1  - prediction_days:len(model_inputs+1),  0]]\nreal_data = np.array(real_data)\nreal_data = np.reshape(real_data,  (real_data.shape[0], real_data.shape[1],  1))\nprediction = model.predict(real_data)\nprediction = scaler.inverse_transform(prediction)\nprint(f\"Prediction: {prediction}\")\n</code></pre>\n<pre><code class=\"language-console\">(venv) D:\\projects\\stock_price_predictor>python main.py\nPrediction: [[130.61981]]\n(venv) D:\\projects\\stock_price_predictor>\n</code></pre>\n<h3>Conclusion</h3>\n<p>You can check the code here <a href=\"https://github.com/zerocod3r/stock_price_predictor\">https://github.com/zerocod3r/stock<em>price</em>predictor</a></p>\n<p>The prediction is not always correct as stock markets are very much volatile to news and things happening around, but this could be used a starter for coding such scripts to automate trading. In future I will keep on updating the code making it more generic and accurate.</p>\n<p>Suggestions and abuses are welcome on github issue.</p>","frontmatter":{"date":"April 23, 2021","path":"/stock_price_predictor","title":"Stock Price Predictor"}}},"pageContext":{}},"staticQueryHashes":[]}