{"componentChunkName":"component---src-templates-blog-js","path":"/stock_price_predictor","result":{"data":{"markdownRemark":{"html":"<p>I am hoping you are having basic market knowledge and Python knowledge before starting this. We are writing a code a here to predict next one day price for a stock. </p>\n<p><em>Disclaimer: This is for demonstration and learning\npurpose only, I don't recommend trusting purely this\nfor stock market trading. Trust your instincts.</em></p>\n<h2>Requirements</h2>\n<p>We require python3 for this, you can install python\nfrom here <a href=\"https://www.python.org/downloads/\">https://www.python.org/downloads/</a>\nAfter installing python you need to install these\npython packages. Open terminal/cmd and put these\ncommands.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ pip3 install scikit-learn\n$ pip3 install pandas\n$ pip3 install pandas-datareader\n$ pip3 install matplotlib\n$ pip3 install tensorflow</code></pre></div>\n<h2>Code go through</h2>\n<p>Import these libraries first as we need will be requiring these.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> pandas_datareader <span class=\"token keyword\">as</span> web\n<span class=\"token keyword\">import</span> datetime <span class=\"token keyword\">as</span> dt\n\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> MinMaxScaler\n<span class=\"token keyword\">from</span> tensorflow<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Sequential\n<span class=\"token keyword\">from</span> tensorflow<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers <span class=\"token keyword\">import</span> Dense<span class=\"token punctuation\">,</span> Dropout<span class=\"token punctuation\">,</span> LSTM</code></pre></div>\n<p>Now we need to define the stock, start date and end data for which we need to fetch stock prices dataset,</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">company <span class=\"token operator\">=</span>  <span class=\"token string\">'AAPL'</span>  <span class=\"token comment\"># Apple stock symbol</span>\nstart <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nend <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We need to preprocess dataset to scale it to lower values range, here we keeping range to -1 to 1. We are using only close values here, the value of stocks after market has stopped.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">scaler <span class=\"token operator\">=</span> MinMaxScaler<span class=\"token punctuation\">(</span>feature_range<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nscaled_data <span class=\"token operator\">=</span> scaler<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'Close'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Storing trained data</h2>\n<p>Here we storing the training data in arrays. Going from number of prediction days to length of scaled data, starting counting from 60th index to the last index of scaled data.\nHere in <code class=\"language-text\">x_train</code> we adding data for first 60 values, using this we will we will store 61th value in <code class=\"language-text\">y_train</code> and so on\nConvert our arrays to numpy array and reshape.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">prediction_days <span class=\"token operator\">=</span> <span class=\"token number\">60</span>\nx_train <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ny_train <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span>  <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>prediction_days<span class=\"token punctuation\">,</span>  <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>scaled_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tx_train<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>scaled_data<span class=\"token punctuation\">[</span>x<span class=\"token operator\">-</span>prediction_days<span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 60 values</span>\n\ty_train<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>scaled_data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 61st value</span>\n\nx_train <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">)</span>\ny_train <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">)</span>\nx_train <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Building model</h2>\n<p>Initialize a Sequential model. A <code class=\"language-text\">Sequential</code> model is appropriate for a plain stack of layers where each layer has exactly one input tensor and one output tensor.\nWe are using Long Short-Term Memory Networks here, is a type of neural network model which is capable of learning dependency of order in sequence prediction problem, like the one we need to do here, process past data to get next data. Units are layers of data set to be trained, more the number more time it will take to train data. <code class=\"language-text\">return_sequences</code> is set true because LSTM does feedback operation to feed again data.\nData epochs 30 means 29 times iterate same data. We can tweak this number to get better results</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">model <span class=\"token operator\">=</span> Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>LSTM<span class=\"token punctuation\">(</span>units<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span>  return_sequences<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>  input_shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>LSTM<span class=\"token punctuation\">(</span>units<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span>  return_sequences<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>LSTM<span class=\"token punctuation\">(</span>units<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dense<span class=\"token punctuation\">(</span>units<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Prediction of next closing value</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>optimizer<span class=\"token operator\">=</span><span class=\"token string\">'adam'</span><span class=\"token punctuation\">,</span>  loss<span class=\"token operator\">=</span><span class=\"token string\">'mean_squared_error'</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span>  epochs<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Using model to predict next close price</h2>\n<p>First we create a test data and use our model on it to check how well it matches with actual data.\nAgain we will be fetching Close prices for same company stock from desired date to current date, and reshape last 60 days values.\nThen we need to create and reshape our data to numpy array, as predict function takes input a defined </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">test_start <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ntest_end <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntest_data <span class=\"token operator\">=</span> web<span class=\"token punctuation\">.</span>DataReader<span class=\"token punctuation\">(</span>company<span class=\"token punctuation\">,</span>  <span class=\"token string\">'yahoo'</span><span class=\"token punctuation\">,</span> test_start<span class=\"token punctuation\">,</span> test_end<span class=\"token punctuation\">)</span>\nactual_prices <span class=\"token operator\">=</span> test_data<span class=\"token punctuation\">[</span><span class=\"token string\">'Close'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values\ntotal_dataset <span class=\"token operator\">=</span> test_data<span class=\"token punctuation\">[</span><span class=\"token string\">'Close'</span><span class=\"token punctuation\">]</span>\nmodel_inputs <span class=\"token operator\">=</span> total_dataset<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>total_dataset<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> prediction_days<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values\nmodel_inputs <span class=\"token operator\">=</span> model_inputs<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nmodel_inputs <span class=\"token operator\">=</span> scaler<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>model_inputs<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here we are putting out <code class=\"language-text\">model_inputs</code> numpy array to model predict to get the desired value, but before putting it we need to reshape our data to dimensions that model had used while training.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">real_data <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>model_inputs<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>model_inputs<span class=\"token punctuation\">)</span>  <span class=\"token operator\">-</span>  <span class=\"token number\">1</span>  <span class=\"token operator\">-</span> prediction_days<span class=\"token punctuation\">:</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>model_inputs<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nreal_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>real_data<span class=\"token punctuation\">)</span>\nreal_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>real_data<span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">(</span>real_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> real_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nprediction <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>real_data<span class=\"token punctuation\">)</span>\nprediction <span class=\"token operator\">=</span> scaler<span class=\"token punctuation\">.</span>inverse_transform<span class=\"token punctuation\">(</span>prediction<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Prediction: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>prediction<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">(venv) D:\\projects\\stock_price_predictor&gt;python main.py\nPrediction: [[130.61981]]\n(venv) D:\\projects\\stock_price_predictor&gt;</code></pre></div>\n<h2>Conclusion</h2>\n<p>You can check the code <a href=\"https://github.com/zerocod3r/stock_price_predictor\">Here</a>.</p>\n<p>The prediction is not always correct as stock markets are very much volatile to news and things happening around, but this could be used a starter for coding such scripts to automate trading. In future I will keep on updating the code making it more generic and accurate.</p>\n<p>Suggestions and abuses are welcome on github issue.</p>\n<p>Questions or comments? Send an email to <a href=\"mailto:zerocod3r@protonmail.com\">zerocod3r@protonmail.com</a>.</p>","frontmatter":{"date":"April 23, 2021","path":"/stock_price_predictor","title":"Stock Price Predictor"}}},"pageContext":{}},"staticQueryHashes":[]}