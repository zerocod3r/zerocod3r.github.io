"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.buildProductionBundle = void 0;

var _webpack = _interopRequireDefault(require("webpack"));

var _webpack2 = _interopRequireDefault(require("../utils/webpack.config"));

const buildProductionBundle = async (program, parentSpan) => {
  const {
    directory
  } = program;
  const compilerConfig = await (0, _webpack2.default)(program, directory, `build-javascript`, null, {
    parentSpan
  });
  return new Promise((resolve, reject) => {
    const compiler = (0, _webpack.default)(compilerConfig);
    compiler.run((err, stats) => {
      // stats can only be empty when an error occurs. Adding it to the if makes typescript happy.
      if (err || !stats) {
        return reject(err);
      }

      if (stats.hasErrors()) {
        return reject(stats.compilation.errors);
      }

      return resolve(stats);
    });
  });
};

exports.buildProductionBundle = buildProductionBundle;
//# sourceMappingURL=build-javascript.js.map