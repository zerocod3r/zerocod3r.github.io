"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.onRenderBody = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireDefault(require("react"));

var onRenderBody = function onRenderBody(_ref, pluginOptions) {
  var setPostBodyComponents = _ref.setPostBodyComponents;
  var plugins = pluginOptions.plugins,
      disable = pluginOptions.disable,
      src = pluginOptions.src,
      onerror = pluginOptions.onerror,
      onError = pluginOptions.onError,
      onload = pluginOptions.onload,
      onLoad = pluginOptions.onLoad,
      _pluginOptions$charse = pluginOptions.charset,
      charset = _pluginOptions$charse === void 0 ? 'utf8' : _pluginOptions$charse,
      _pluginOptions$type = pluginOptions.type,
      type = _pluginOptions$type === void 0 ? 'text/javascript' : _pluginOptions$type,
      options = (0, _objectWithoutPropertiesLoose2.default)(pluginOptions, ["plugins", "disable", "src", "onerror", "onError", "onload", "onLoad", "charset", "type"]);

  if (!src) {
    throw new Error('gatsby-plugin-load-script needs a "src" option in order to work correctly');
  }

  var finalOptions = (0, _extends2.default)({
    src: src,
    onerror: onError || onerror,
    onload: onLoad || onload,
    type: type,
    charset: charset
  }, options);

  if (!('async' in finalOptions) && !('defer' in finalOptions)) {
    // Async should be true by default
    finalOptions['async'] = true;
  }

  var optionArray = [];
  Object.entries(finalOptions).forEach(function (_ref2) {
    var property = _ref2[0],
        value = _ref2[1];

    if (value === undefined || value === false) {
      return;
    }

    if (property === 'onerror' || property === 'onload') {
      optionArray.push("script.setAttribute(\"" + property + "\", " + value + ");");
    } else if (value === true) {
      // https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute
      optionArray.push("script.setAttribute(\"" + property + "\", \"\");");
    } else {
      optionArray.push("script.setAttribute(\"" + property + "\", \"" + value + "\");");
    }
  });
  if (!disable) setPostBodyComponents([/*#__PURE__*/_react.default.createElement("script", {
    key: src,
    dangerouslySetInnerHTML: {
      __html: ['var head = document.head || document.getElementsByTagName("head")[0];', 'var script = document.createElement("script");'].concat(optionArray, ['head.appendChild(script);']).join(process.env.NODE_ENV === 'production' ? '' : '\n')
    }
  })]);
};

exports.onRenderBody = onRenderBody;